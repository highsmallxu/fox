class Variable

predicate [CompletelyGroundedSets]: indep(Variable, Variable, Set{0,3}[Variable])
predicate : causes(Variable, Variable)

// 0. conditional independence is symmetric in the first two variables.
rule: indep(X, Y, Z) => indep(Y, X, Z)

// 2. Irreflexivity of causes:
// !(X → X)
rule: !causes(X, X)

// 4. Acyclicity
// X→ Y => Y-/->X
rule: causes(X,Y) => !causes(Y,X)

// 5. Transitivity:
// X → Y && Y → Z => X → Z
rule: causes(X,Y)  && causes(Y,Z) => causes(X,Z)

// 6. If Z makes X and Y conditionally independent, then Z causes either X or Y or both.
rule: !indep(X,Y,W)  && indep(X,Y,{W, Z}) => causes(Z, X) || causes (Z, Y) || EXISTS [W1 in W] causes (Z, W1)
// 6b. W cannot be empty, as we cannot do FOREACH on an empty set, so we need to add extra rule.
rule: !indep(X,Y,{})  && indep(X,Y,Z) => causes(Z, X) || causes (Z, Y) 

// 7. If Z makes X and Y conditionally dependent, then Z does not cause neither X or Y, nor any of W.
rule: indep(X,Y,W)  && !indep(X,Y,{W,Z}) => !causes(Z, X)
rule: indep(X,Y,W)  && !indep(X,Y,{W,Z}) => !causes(Z, Y)
rule: indep(X,Y,W)  && !indep(X,Y,{W,Z}) => !causes(Z, W)
rule: indep(X,Y,W)  && !indep(X,Y,{W,Z}) => FOREACH [W1 in W] !causes(Z, W1)

// 8. If X and Y are independent, then they are not causing each other.
// Faithfulness assumption.
// Should cover 9. when Z and W are both empty.
rule: indep(X,Y, {}) => !causes(X, Y)

// 9. Tom's new rule. 
// W is a Variable (having it also in causes (X, W) makes it a single variable), thus cannot be empty.
// Z is a Set [Variable], since it's in a FOREACH it cannot be empty.
// X and Y become independent when we add W to Z.
rule: indep(X,Y,Z) && FOREACH [Z1 strictSubsetOf Z] !indep(X,Y,Z1) && FOREACH [Z2 in Z] !causes(X, Z2) => !causes(X,Y)
